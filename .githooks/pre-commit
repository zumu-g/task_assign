#!/bin/bash

# FlowAI Pre-Commit Git Agent
# Comprehensive code quality and security checks

set -e

echo "🤖 FlowAI Git Agent: Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[FlowAI Git Agent]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Track if any checks fail
CHECKS_FAILED=0

# 1. Check for forbidden files and patterns
print_status "Checking for forbidden files and patterns..."

# Check for common sensitive files
FORBIDDEN_FILES=(
    "*.log"
    "*.env"
    "*.env.local"
    "*.env.production"
    "*.key"
    "*.pem"
    "*.p12"
    "*.pfx"
    "id_rsa"
    "id_dsa"
    "*.secret"
    ".DS_Store"
    "Thumbs.db"
    "*.tmp"
    "*.temp"
)

for pattern in "${FORBIDDEN_FILES[@]}"; do
    if git diff --cached --name-only | grep -q "$pattern"; then
        print_error "Forbidden file pattern detected: $pattern"
        CHECKS_FAILED=1
    fi
done

# Check for secrets in staged files
if git diff --cached | grep -i -E "(password|secret|key|token|api_key)" | grep -v "# " | grep -q "="; then
    print_error "Potential secret detected in staged files"
    print_warning "Please review your changes for exposed credentials"
    CHECKS_FAILED=1
fi

if [ $CHECKS_FAILED -eq 0 ]; then
    print_success "Forbidden files check passed"
fi

# 2. File size check
print_status "Checking file sizes..."

LARGE_FILES=$(git diff --cached --name-only | xargs -I {} find {} -type f -size +5M 2>/dev/null || true)
if [ ! -z "$LARGE_FILES" ]; then
    print_error "Large files detected (>5MB):"
    echo "$LARGE_FILES"
    print_warning "Consider using Git LFS for large files"
    CHECKS_FAILED=1
else
    print_success "File size check passed"
fi

# 3. TypeScript compilation check
print_status "Checking TypeScript compilation..."

if [ -f "tsconfig.json" ]; then
    if command -v tsc >/dev/null 2>&1; then
        if ! tsc --noEmit; then
            print_error "TypeScript compilation failed"
            CHECKS_FAILED=1
        else
            print_success "TypeScript compilation passed"
        fi
    else
        print_warning "TypeScript compiler not found, skipping compilation check"
    fi
else
    print_warning "No tsconfig.json found, skipping TypeScript check"
fi

# 4. ESLint check for staged files
print_status "Running ESLint on staged files..."

STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ ! -z "$STAGED_JS_FILES" ]; then
    if command -v eslint >/dev/null 2>&1; then
        if ! echo "$STAGED_JS_FILES" | xargs eslint; then
            print_error "ESLint check failed"
            print_warning "Run 'npm run lint' to see detailed errors"
            CHECKS_FAILED=1
        else
            print_success "ESLint check passed"
        fi
    else
        print_warning "ESLint not found, skipping lint check"
    fi
else
    print_success "No JavaScript/TypeScript files to lint"
fi

# 5. Prettier formatting check
print_status "Checking code formatting with Prettier..."

if [ ! -z "$STAGED_JS_FILES" ]; then
    if command -v prettier >/dev/null 2>&1; then
        if ! echo "$STAGED_JS_FILES" | xargs prettier --check; then
            print_error "Code formatting check failed"
            print_warning "Run 'npm run format' or 'prettier --write .' to fix formatting"
            CHECKS_FAILED=1
        else
            print_success "Code formatting check passed"
        fi
    else
        print_warning "Prettier not found, skipping format check"
    fi
else
    print_success "No files to format"
fi

# 6. Package.json validation
print_status "Validating package.json files..."

PACKAGE_FILES=$(git diff --cached --name-only | grep "package\.json$" || true)
if [ ! -z "$PACKAGE_FILES" ]; then
    for file in $PACKAGE_FILES; do
        if ! python3 -m json.tool "$file" >/dev/null 2>&1; then
            print_error "Invalid JSON in $file"
            CHECKS_FAILED=1
        fi
    done
    if [ $CHECKS_FAILED -eq 0 ]; then
        print_success "Package.json validation passed"
    fi
else
    print_success "No package.json files to validate"
fi

# 7. Commit message validation (if available)
print_status "Validating commit message format..."

# Get the commit message
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    
    # Check commit message length (first line should be <= 72 chars)
    FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)
    if [ ${#FIRST_LINE} -gt 72 ]; then
        print_error "Commit message first line too long (${#FIRST_LINE} chars, max 72)"
        CHECKS_FAILED=1
    fi
    
    # Check for conventional commit format
    if ! echo "$FIRST_LINE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|build|perf)(\(.+\))?: .+"; then
        print_warning "Consider using conventional commit format: type(scope): description"
    fi
    
    if [ $CHECKS_FAILED -eq 0 ]; then
        print_success "Commit message validation passed"
    fi
fi

# 8. Check for TODO comments in critical files
print_status "Checking for TODO comments in staged files..."

TODO_FILES=$(git diff --cached | grep -n "TODO\|FIXME\|HACK" || true)
if [ ! -z "$TODO_FILES" ]; then
    print_warning "TODO/FIXME comments found in staged files:"
    echo "$TODO_FILES"
    print_warning "Consider addressing these before committing"
fi

# 9. Check for console.log statements
print_status "Checking for console.log statements..."

if [ ! -z "$STAGED_JS_FILES" ]; then
    CONSOLE_LOGS=$(echo "$STAGED_JS_FILES" | xargs grep -n "console\." || true)
    if [ ! -z "$CONSOLE_LOGS" ]; then
        print_warning "console.log statements found:"
        echo "$CONSOLE_LOGS"
        print_warning "Consider removing console statements before committing"
    fi
fi

# 10. Final check for monorepo structure
print_status "Validating monorepo structure..."

REQUIRED_DIRS=("apps/web" "apps/api" "packages/shared")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        print_error "Required directory missing: $dir"
        CHECKS_FAILED=1
    fi
done

if [ $CHECKS_FAILED -eq 0 ]; then
    print_success "Monorepo structure validation passed"
fi

# Summary
echo ""
if [ $CHECKS_FAILED -eq 1 ]; then
    print_error "Pre-commit checks failed! Please fix the issues above before committing."
    echo ""
    print_status "Quick fixes:"
    echo "  • Run 'npm run lint' to fix linting issues"
    echo "  • Run 'npm run format' to fix formatting"
    echo "  • Remove or gitignore forbidden files"
    echo "  • Review commit message format"
    echo ""
    exit 1
else
    print_success "All pre-commit checks passed! ✨"
    echo ""
    print_status "Commit proceeding..."
fi

exit 0